SDL 2 What is that? 
Partie 1 
Je vous demande de construire votre projet SDL2/C pas à pas, votre premier travail sera de créer un repository (ou branch sur repository existant) afin de pouvoir créer des commit des différentes étapes de votre projet. Les réponses aux questions doivent être rédigées dans votre documentation, les codes seront réalisés à la volée dans votre projet. Les codes doivent impérativement être testés. Les codes et la documentation seront indexés dans votre repository. 

1) Qu’est-ce que la SDL 2 ? (10 points)  
La SDL est une bibliothèque multimédia. Elle permet un accès audio, souris, joystick, graphiques. Donc permet d’afficher des fenêtres et d’afficher des images, de jouer des sons, et pouvoir gérer les commandes clavier/souris.

2) Que peut faire la SDL 2 ? (10 points) 
Elle permet de faire différents types de projet, jeux en 2D par exemple. Donc peut gérer le tile mapping, les collisions, les évènements, les combats.

3) Sur quelles plateformes fonctionne la SDL 2 ? (10 points) 
La SDL fonctionne sur Apple, Linux, Windows.

4) Comment obtenir et installer la SDL 2 sur un EDI ? Donnez les étapes de la configuration d’un projet SDL2 avec CodeBlocks (gcc). (10 points) 
Il faut se rendre sur le site http://www.libsdl.org/download-2.0.php#source,
Pour la configuration ,il est préférable de mettre l’archive dans la racine de codeblocks , puis sur codeblocks .Dans le project/build options puis aller dans linker settings ,on ajoute les chemins 
•	lib\libSDL2main.a
•	lib\libSDL2.dll.a
Pour on ajoute -lmingw32 dans other linker option.
Puis dans search directorie, dans :
•	Compiler:  le chemin SDL2-2.0.10\i686-w64-mingw32\include
•	Linker: le chemin SDL2-2.0.10\i686-w64-mingw32\lib

5) Quelles sont les différences entre SDL 1 et SDL 2 ? (5 points) 
La SDL2 est une amélioration du 1, pour la création de la fenêtre et l’utilisation de textures avec une accélération matérielle, il apporte plusieurs correctifs pour la SDL1 et apporte quelques autres fonctionnalités.

6) Pour utiliser la SDL 2 dans votre projet, vous devez initialiser l’instance SDL 2, quelles sont les étapes d’initialisation à réaliser pour utiliser la lib SDL 2, donnez le code correspondant et expliquez précisément chaque instruction. (15 points) 
Pour être utilisée, la SDL doit d’abord être initialisée. Pour cela, nous devons utiliser la fonction SDL_Init.

int SDL_Init(Uint32 flags)
Cette fonction prend en paramètre une liste de flags sous la forme d’un entier, ceux-ci correspondants aux sous-systèmes que l’on veut initialiser.

Quelque example de flag:

SDL_INIT_AUDIO
Initialise le système de gestion de l’audio

SDL_INIT_VIDEO
Initialise le système de gestion de rendu

SDL_INIT_EVERYTHING
Permet de tout initialiser


const char* SDL_GetError(void)
Cette fonction ne prend aucun paramètre et renvoie une chaine de caractères qui est un message à propos de la dernière erreur que la SDL a rencontrée.

void SDL_Quit(void)
Cette fonction ne prend pas d’arguments et ne renvoie rien. Elle permet de quitter la SDL.

7) Comment créer une fenêtre avec SDL 2, donnez et expliquez le code correspondant à la création d’une fenêtre avec SDL 2. (10 points)
Pour créer une fenêtre on va utiliser SDL_CreateWindow.
SDL_Window* SDL_CreateWindow(const char* title, nom de la fenêtre
                             int         x,		position X
                             int         y,		position Y
                             int         w,		Taille W
                             int         h,		Taille H
                             Uint32      flags)	Format de parametrage de la fenetre

SDL_WINDOWPOS_CENTERED sert à centrer la fenêtre.
SDL_WINDOW_SHOWN	   rend juste visible la fenêtre.

Puis on supprime la fenêtre.
SDL_DestroyWindow(Window); //Supprime la fenêtre

8) Gestion d’une fenêtre SDL 2, donnez les primitives associées à la fenêtre SDL 2. (10 points) 

//Créer la fenêtre
SDL_CreateWindow

//Supprimer la fenêtre
SDL_DestroyWindow

// changer titre de la fenêtre est la chaîne de caractère passée en deuxième argument
void SDL_SetWindowTitle(SDL_Window* window, const char* title);

// ajoute une icône à la fenêtre
void SDL_SetWindowIcon(SDL_Window*  window, SDL_Surface* icon);

// déplace la fenêtre à la position (x;y) dans le repère présenté précédemment
void SDL_SetWindowPosition(SDL_Window* window , int x, int y);

// redimensionne la fenêtre qui sera ensuite large de w pixels et haute de h pixels
void SDL_SetWindowSize(SDL_Window* window , int w , int h);

// la position de la fenêtre sera placée dans les pointeurs x et y
void SDL_GetWindowPosition(SDL_Window* window, int* x, int* y);

// la taille de la fenêtre sera placée dans les pointeurs w et h
void SDL_GetWindowSize(SDL_Window* window, int* w, int* h);

// agrandissement de la fenêtre
void SDL_MaximizeWindow(SDL_Window* window);  

// réduction de la fenêtre
void SDL_MinimizeWindow(SDL_Window* window);  

// restauration de la fenêtre
void SDL_RestoreWindow(SDL_Window* window);  

//Mettre en pleine écran
int SDL_SetWindowFullscreen(SDL_Window* window , SDL_bool fullscreen);

// définir la luminosité de l'écran
int SDL_SetWindowBrightness(SDL_Window* window, float luminosite);

// récupérer la luminosité
float SDL_GetWindowBrightness(SDL_Window* window);

9) Gérer un rendu : qu’est-ce qu’un renderer, comment est-il associé à la fenêtre SDL 2 ? Donnez et expliquez le code permettant de gérer un rendu, création, affichage, effacement…. (15 points) 
C'est un moteur de rendu d’une fenêtre,il va contenir les informations du contexte d'affichage de la fenêtre. C’est-à-dire de créer une image que l’on va afficher.Il est contenu dans une structure SDL_Renderer.

10) SDL_Point et SDL_Rect : Donnez et expliquez le code de la déclaration d’un SDL_Point et SDL_Rect (5 points) 

11) Les couleurs avec la SDL2 : donnez les instructions permettant de gérer la couleur avec la SDL 2 